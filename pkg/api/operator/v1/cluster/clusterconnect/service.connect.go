// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/v1/cluster/service.proto

package clusterconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cluster "github.com/megakuul/miam/pkg/api/operator/v1/cluster"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClusterServiceName is the fully-qualified name of the ClusterService service.
	ClusterServiceName = "operator.v1.cluster.ClusterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClusterServiceListProcedure is the fully-qualified name of the ClusterService's List RPC.
	ClusterServiceListProcedure = "/operator.v1.cluster.ClusterService/List"
	// ClusterServiceGetProcedure is the fully-qualified name of the ClusterService's Get RPC.
	ClusterServiceGetProcedure = "/operator.v1.cluster.ClusterService/Get"
	// ClusterServiceDescribeProcedure is the fully-qualified name of the ClusterService's Describe RPC.
	ClusterServiceDescribeProcedure = "/operator.v1.cluster.ClusterService/Describe"
	// ClusterServiceUpdateProcedure is the fully-qualified name of the ClusterService's Update RPC.
	ClusterServiceUpdateProcedure = "/operator.v1.cluster.ClusterService/Update"
	// ClusterServiceDestroyProcedure is the fully-qualified name of the ClusterService's Destroy RPC.
	ClusterServiceDestroyProcedure = "/operator.v1.cluster.ClusterService/Destroy"
)

// ClusterServiceClient is a client for the operator.v1.cluster.ClusterService service.
type ClusterServiceClient interface {
	List(context.Context, *connect.Request[cluster.ListRequest]) (*connect.Response[cluster.ListResponse], error)
	Get(context.Context, *connect.Request[cluster.GetRequest]) (*connect.Response[cluster.GetResponse], error)
	Describe(context.Context, *connect.Request[cluster.DescribeRequest]) (*connect.Response[cluster.DescribeResponse], error)
	Update(context.Context, *connect.Request[cluster.UpdateRequest]) (*connect.Response[cluster.UpdateResponse], error)
	Destroy(context.Context, *connect.Request[cluster.DestroyRequest]) (*connect.Response[cluster.DestroyResponse], error)
}

// NewClusterServiceClient constructs a client for the operator.v1.cluster.ClusterService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClusterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClusterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clusterServiceMethods := cluster.File_operator_v1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	return &clusterServiceClient{
		list: connect.NewClient[cluster.ListRequest, cluster.ListResponse](
			httpClient,
			baseURL+ClusterServiceListProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[cluster.GetRequest, cluster.GetResponse](
			httpClient,
			baseURL+ClusterServiceGetProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		describe: connect.NewClient[cluster.DescribeRequest, cluster.DescribeResponse](
			httpClient,
			baseURL+ClusterServiceDescribeProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Describe")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[cluster.UpdateRequest, cluster.UpdateResponse](
			httpClient,
			baseURL+ClusterServiceUpdateProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		destroy: connect.NewClient[cluster.DestroyRequest, cluster.DestroyResponse](
			httpClient,
			baseURL+ClusterServiceDestroyProcedure,
			connect.WithSchema(clusterServiceMethods.ByName("Destroy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clusterServiceClient implements ClusterServiceClient.
type clusterServiceClient struct {
	list     *connect.Client[cluster.ListRequest, cluster.ListResponse]
	get      *connect.Client[cluster.GetRequest, cluster.GetResponse]
	describe *connect.Client[cluster.DescribeRequest, cluster.DescribeResponse]
	update   *connect.Client[cluster.UpdateRequest, cluster.UpdateResponse]
	destroy  *connect.Client[cluster.DestroyRequest, cluster.DestroyResponse]
}

// List calls operator.v1.cluster.ClusterService.List.
func (c *clusterServiceClient) List(ctx context.Context, req *connect.Request[cluster.ListRequest]) (*connect.Response[cluster.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls operator.v1.cluster.ClusterService.Get.
func (c *clusterServiceClient) Get(ctx context.Context, req *connect.Request[cluster.GetRequest]) (*connect.Response[cluster.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Describe calls operator.v1.cluster.ClusterService.Describe.
func (c *clusterServiceClient) Describe(ctx context.Context, req *connect.Request[cluster.DescribeRequest]) (*connect.Response[cluster.DescribeResponse], error) {
	return c.describe.CallUnary(ctx, req)
}

// Update calls operator.v1.cluster.ClusterService.Update.
func (c *clusterServiceClient) Update(ctx context.Context, req *connect.Request[cluster.UpdateRequest]) (*connect.Response[cluster.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Destroy calls operator.v1.cluster.ClusterService.Destroy.
func (c *clusterServiceClient) Destroy(ctx context.Context, req *connect.Request[cluster.DestroyRequest]) (*connect.Response[cluster.DestroyResponse], error) {
	return c.destroy.CallUnary(ctx, req)
}

// ClusterServiceHandler is an implementation of the operator.v1.cluster.ClusterService service.
type ClusterServiceHandler interface {
	List(context.Context, *connect.Request[cluster.ListRequest]) (*connect.Response[cluster.ListResponse], error)
	Get(context.Context, *connect.Request[cluster.GetRequest]) (*connect.Response[cluster.GetResponse], error)
	Describe(context.Context, *connect.Request[cluster.DescribeRequest]) (*connect.Response[cluster.DescribeResponse], error)
	Update(context.Context, *connect.Request[cluster.UpdateRequest]) (*connect.Response[cluster.UpdateResponse], error)
	Destroy(context.Context, *connect.Request[cluster.DestroyRequest]) (*connect.Response[cluster.DestroyResponse], error)
}

// NewClusterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClusterServiceHandler(svc ClusterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clusterServiceMethods := cluster.File_operator_v1_cluster_service_proto.Services().ByName("ClusterService").Methods()
	clusterServiceListHandler := connect.NewUnaryHandler(
		ClusterServiceListProcedure,
		svc.List,
		connect.WithSchema(clusterServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceGetHandler := connect.NewUnaryHandler(
		ClusterServiceGetProcedure,
		svc.Get,
		connect.WithSchema(clusterServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDescribeHandler := connect.NewUnaryHandler(
		ClusterServiceDescribeProcedure,
		svc.Describe,
		connect.WithSchema(clusterServiceMethods.ByName("Describe")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceUpdateHandler := connect.NewUnaryHandler(
		ClusterServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(clusterServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	clusterServiceDestroyHandler := connect.NewUnaryHandler(
		ClusterServiceDestroyProcedure,
		svc.Destroy,
		connect.WithSchema(clusterServiceMethods.ByName("Destroy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/operator.v1.cluster.ClusterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClusterServiceListProcedure:
			clusterServiceListHandler.ServeHTTP(w, r)
		case ClusterServiceGetProcedure:
			clusterServiceGetHandler.ServeHTTP(w, r)
		case ClusterServiceDescribeProcedure:
			clusterServiceDescribeHandler.ServeHTTP(w, r)
		case ClusterServiceUpdateProcedure:
			clusterServiceUpdateHandler.ServeHTTP(w, r)
		case ClusterServiceDestroyProcedure:
			clusterServiceDestroyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClusterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClusterServiceHandler struct{}

func (UnimplementedClusterServiceHandler) List(context.Context, *connect.Request[cluster.ListRequest]) (*connect.Response[cluster.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.cluster.ClusterService.List is not implemented"))
}

func (UnimplementedClusterServiceHandler) Get(context.Context, *connect.Request[cluster.GetRequest]) (*connect.Response[cluster.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.cluster.ClusterService.Get is not implemented"))
}

func (UnimplementedClusterServiceHandler) Describe(context.Context, *connect.Request[cluster.DescribeRequest]) (*connect.Response[cluster.DescribeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.cluster.ClusterService.Describe is not implemented"))
}

func (UnimplementedClusterServiceHandler) Update(context.Context, *connect.Request[cluster.UpdateRequest]) (*connect.Response[cluster.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.cluster.ClusterService.Update is not implemented"))
}

func (UnimplementedClusterServiceHandler) Destroy(context.Context, *connect.Request[cluster.DestroyRequest]) (*connect.Response[cluster.DestroyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.cluster.ClusterService.Destroy is not implemented"))
}
