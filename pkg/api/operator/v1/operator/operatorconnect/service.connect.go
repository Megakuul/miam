// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: operator/v1/operator/service.proto

package operatorconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	operator "github.com/megakuul/miam/pkg/api/operator/v1/operator"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MaintenanceServiceName is the fully-qualified name of the MaintenanceService service.
	MaintenanceServiceName = "operator.v1.operator.MaintenanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MaintenanceServiceGetProcedure is the fully-qualified name of the MaintenanceService's Get RPC.
	MaintenanceServiceGetProcedure = "/operator.v1.operator.MaintenanceService/Get"
	// MaintenanceServiceDescribeProcedure is the fully-qualified name of the MaintenanceService's
	// Describe RPC.
	MaintenanceServiceDescribeProcedure = "/operator.v1.operator.MaintenanceService/Describe"
	// MaintenanceServiceUpdateProcedure is the fully-qualified name of the MaintenanceService's Update
	// RPC.
	MaintenanceServiceUpdateProcedure = "/operator.v1.operator.MaintenanceService/Update"
	// MaintenanceServiceDestroyProcedure is the fully-qualified name of the MaintenanceService's
	// Destroy RPC.
	MaintenanceServiceDestroyProcedure = "/operator.v1.operator.MaintenanceService/Destroy"
)

// MaintenanceServiceClient is a client for the operator.v1.operator.MaintenanceService service.
type MaintenanceServiceClient interface {
	Get(context.Context, *connect.Request[operator.GetRequest]) (*connect.Response[operator.GetResponse], error)
	Describe(context.Context, *connect.Request[operator.DescribeRequest]) (*connect.Response[operator.DescribeResponse], error)
	Update(context.Context, *connect.Request[operator.UpdateRequest]) (*connect.Response[operator.UpdateResponse], error)
	Destroy(context.Context, *connect.Request[operator.DestroyRequest]) (*connect.Response[operator.DestroyResponse], error)
}

// NewMaintenanceServiceClient constructs a client for the operator.v1.operator.MaintenanceService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMaintenanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MaintenanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	maintenanceServiceMethods := operator.File_operator_v1_operator_service_proto.Services().ByName("MaintenanceService").Methods()
	return &maintenanceServiceClient{
		get: connect.NewClient[operator.GetRequest, operator.GetResponse](
			httpClient,
			baseURL+MaintenanceServiceGetProcedure,
			connect.WithSchema(maintenanceServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		describe: connect.NewClient[operator.DescribeRequest, operator.DescribeResponse](
			httpClient,
			baseURL+MaintenanceServiceDescribeProcedure,
			connect.WithSchema(maintenanceServiceMethods.ByName("Describe")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[operator.UpdateRequest, operator.UpdateResponse](
			httpClient,
			baseURL+MaintenanceServiceUpdateProcedure,
			connect.WithSchema(maintenanceServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		destroy: connect.NewClient[operator.DestroyRequest, operator.DestroyResponse](
			httpClient,
			baseURL+MaintenanceServiceDestroyProcedure,
			connect.WithSchema(maintenanceServiceMethods.ByName("Destroy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// maintenanceServiceClient implements MaintenanceServiceClient.
type maintenanceServiceClient struct {
	get      *connect.Client[operator.GetRequest, operator.GetResponse]
	describe *connect.Client[operator.DescribeRequest, operator.DescribeResponse]
	update   *connect.Client[operator.UpdateRequest, operator.UpdateResponse]
	destroy  *connect.Client[operator.DestroyRequest, operator.DestroyResponse]
}

// Get calls operator.v1.operator.MaintenanceService.Get.
func (c *maintenanceServiceClient) Get(ctx context.Context, req *connect.Request[operator.GetRequest]) (*connect.Response[operator.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Describe calls operator.v1.operator.MaintenanceService.Describe.
func (c *maintenanceServiceClient) Describe(ctx context.Context, req *connect.Request[operator.DescribeRequest]) (*connect.Response[operator.DescribeResponse], error) {
	return c.describe.CallUnary(ctx, req)
}

// Update calls operator.v1.operator.MaintenanceService.Update.
func (c *maintenanceServiceClient) Update(ctx context.Context, req *connect.Request[operator.UpdateRequest]) (*connect.Response[operator.UpdateResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Destroy calls operator.v1.operator.MaintenanceService.Destroy.
func (c *maintenanceServiceClient) Destroy(ctx context.Context, req *connect.Request[operator.DestroyRequest]) (*connect.Response[operator.DestroyResponse], error) {
	return c.destroy.CallUnary(ctx, req)
}

// MaintenanceServiceHandler is an implementation of the operator.v1.operator.MaintenanceService
// service.
type MaintenanceServiceHandler interface {
	Get(context.Context, *connect.Request[operator.GetRequest]) (*connect.Response[operator.GetResponse], error)
	Describe(context.Context, *connect.Request[operator.DescribeRequest]) (*connect.Response[operator.DescribeResponse], error)
	Update(context.Context, *connect.Request[operator.UpdateRequest]) (*connect.Response[operator.UpdateResponse], error)
	Destroy(context.Context, *connect.Request[operator.DestroyRequest]) (*connect.Response[operator.DestroyResponse], error)
}

// NewMaintenanceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMaintenanceServiceHandler(svc MaintenanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	maintenanceServiceMethods := operator.File_operator_v1_operator_service_proto.Services().ByName("MaintenanceService").Methods()
	maintenanceServiceGetHandler := connect.NewUnaryHandler(
		MaintenanceServiceGetProcedure,
		svc.Get,
		connect.WithSchema(maintenanceServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	maintenanceServiceDescribeHandler := connect.NewUnaryHandler(
		MaintenanceServiceDescribeProcedure,
		svc.Describe,
		connect.WithSchema(maintenanceServiceMethods.ByName("Describe")),
		connect.WithHandlerOptions(opts...),
	)
	maintenanceServiceUpdateHandler := connect.NewUnaryHandler(
		MaintenanceServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(maintenanceServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	maintenanceServiceDestroyHandler := connect.NewUnaryHandler(
		MaintenanceServiceDestroyProcedure,
		svc.Destroy,
		connect.WithSchema(maintenanceServiceMethods.ByName("Destroy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/operator.v1.operator.MaintenanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MaintenanceServiceGetProcedure:
			maintenanceServiceGetHandler.ServeHTTP(w, r)
		case MaintenanceServiceDescribeProcedure:
			maintenanceServiceDescribeHandler.ServeHTTP(w, r)
		case MaintenanceServiceUpdateProcedure:
			maintenanceServiceUpdateHandler.ServeHTTP(w, r)
		case MaintenanceServiceDestroyProcedure:
			maintenanceServiceDestroyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMaintenanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMaintenanceServiceHandler struct{}

func (UnimplementedMaintenanceServiceHandler) Get(context.Context, *connect.Request[operator.GetRequest]) (*connect.Response[operator.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.operator.MaintenanceService.Get is not implemented"))
}

func (UnimplementedMaintenanceServiceHandler) Describe(context.Context, *connect.Request[operator.DescribeRequest]) (*connect.Response[operator.DescribeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.operator.MaintenanceService.Describe is not implemented"))
}

func (UnimplementedMaintenanceServiceHandler) Update(context.Context, *connect.Request[operator.UpdateRequest]) (*connect.Response[operator.UpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.operator.MaintenanceService.Update is not implemented"))
}

func (UnimplementedMaintenanceServiceHandler) Destroy(context.Context, *connect.Request[operator.DestroyRequest]) (*connect.Response[operator.DestroyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("operator.v1.operator.MaintenanceService.Destroy is not implemented"))
}
